# - *- coding: utf- 8 - *-
import aiogram.utils.exceptions
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import Message
from tgbot.data.config import BOT_VERSION, PATH_LOGS, PATH_DATABASE
from tgbot.data.loader import dp
from tgbot.keyboards.reply_all import menu_frep
from tgbot.keyboards.reply_admin_promocode import promocode_select, promocode_exit,promocode_select_count_use
from tgbot.utils.misc.bot_filters import IsAdmin
from tgbot.modules.create_promocode import *
from tgbot.services.sqlite_logic import  *
from tgbot.utils.const_functions import  ded

class CreatePromocode(StatesGroup):
    item = State()
    discount = State()
    count_use = State()
    one_use = State()

#–ü—Ä–æ–º–æ–∫–æ–¥—ã
@dp.message_handler(IsAdmin(), text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ üñç", state="*")
async def promocode_start(message: Message, state: FSMContext):
    await CreatePromocode.item.set()
    records = get_all_item()
    message_data = ''
    if records:
        async with state.proxy() as data:
            data['item'] = records
        for character in records:
            print(character)
            message_data += f"<b><code>{character['position']}</code>. {character['name_item']}. {character['price']}‚ÇΩ </b>\n"
    try:
        await message.answer(f"<i><b>–í—ã–±–µ—Ä–∏—Ç–µ <u>–Ω–æ–º–µ—Ä</u> —Ç–æ–≤–∞—Ä–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥</b></i>\n\n{message_data}", reply_markup=promocode_select())
    except aiogram.utils.exceptions.MessageIsTooLong:
        await message.answer(f"<i><b>–í—ã–±–µ—Ä–∏—Ç–µ <u>–Ω–æ–º–µ—Ä</u> —Ç–æ–≤–∞—Ä–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥</b></i>", reply_markup=promocode_select())
        await message.answer(message_data.split('50.')[0])
        await message.answer(message_data.split('50.')[1])
        #TODO –∫–æ–ª–∑–æ–∑, –∏—Å—Ä–ø–∞–≤–∏—Ç—å


@dp.message_handler(IsAdmin(), state = CreatePromocode.item)
async def procomode_item(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã üíØ":
            data['all_items'] = 1
            data['item_info'] = None
            await message.answer( f"<i><b>–£–∫–∞–∂–∏—Ç–µ —Å–∫–∏–¥–∫—É —Ç–æ–≤–∞—Ä–æ–≤</b></i>", reply_markup=promocode_exit())
            await CreatePromocode.next()
        elif message.text == "–û—Ç–º–µ–Ω–∞ üîô":
            await state.finish()
            await message.answer(f"<b>–£—Å–ø–µ—à–Ω–æ üëç</b>", reply_markup=menu_frep(message.from_user.id))
        else:
            data['all_items'] = 0
            message_data = False
            for row in data['item']:
                if str(row['position']) == message.text:
                    data['item_info'] = row
                    message_data = True
            if message_data == True:
                await message.answer(f"<b>–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω!</b>\n–£–∫–∞–∂–∏—Ç–µ —Å–∫–∏–¥–∫—É —Ç–æ–≤–∞—Ä–∞", reply_markup=promocode_exit())
                await CreatePromocode.next()
            else:
                await message.answer(f"<b>–¢–æ–≤–∞—Ä –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!</b>", reply_markup=promocode_exit())
                await CreatePromocode.item.set()

@dp.message_handler(IsAdmin(), state = CreatePromocode.discount)
async def procomode_item(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞ üîô":
        await state.finish()
        await message.answer(f"<b>–£—Å–ø–µ—à–Ω–æ üëç</b>", reply_markup=menu_frep(message.from_user.id))
    else:
        async with state.proxy() as data:
            discount = message.text
            if "%" in message.text:
                discount = message.text.replace("%", "")
            try:
                int(discount)
                if data['all_items'] == 0:
                    message_data = ded(f"""
                        <b>–ù–æ–≤–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç <code>{int(data['item_info']['price'] - (data['item_info']['price'] / 100 * int(discount)))}</code> ‚ÇΩ</b>
                        <i>–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ - <code>{data['item_info']['price']}</code></i> ‚ÇΩ
                        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ

                        <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>""")
                else:
                    message_data = "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>"

                await message.answer(message_data, reply_markup=promocode_exit())
                data['discount'] = discount
                await CreatePromocode.next()

            except ValueError:
                await message.answer(f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>",reply_markup=promocode_exit())
                await CreatePromocode.discount.set()

@dp.message_handler(IsAdmin(), state = CreatePromocode.count_use)
async def procomode_count_use(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞ üîô":
        await state.finish()
        await message.answer(f"<b>–£—Å–ø–µ—à–Ω–æ üëç</b>", reply_markup=menu_frep(message.from_user.id))
    else:
        async with state.proxy() as data:
            data['use_count'] = message.text
        await message.answer(f"<b>–Ø–≤–ª—è–µ—Ç—Å—è –ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?</b>", reply_markup=promocode_select_count_use())
        await CreatePromocode.next()



@dp.message_handler(IsAdmin(), state = CreatePromocode.one_use)
async def procomode_count_one_use(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == "–û—Ç–º–µ–Ω–∞ üîô":
            await state.finish()
            await message.answer(f"<b>–£—Å–ø–µ—à–Ω–æ üëç</b>", reply_markup=menu_frep(message.from_user.id))
        elif message.text == "–î–∞" or message.text == "–ù–µ—Ç":
            if message.text == "–î–∞":
                data['one_use'] = True

            elif message.text == "–ù–µ—Ç":
                data['one_use'] = False
            await message.answer(f"<b>–ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>", reply_markup=promocode_exit())
            promocode = create()
            if data['item_info'] == None: #–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç, –≤—Å–µ —Ç–æ–≤–∞—Ä—ã!
                add_promocode(promocode, message.from_user.id, None , None, data['discount'], data['use_count'], data['one_use'], data['all_items'])
            else:
                add_promocode(promocode, message.from_user.id, data['item_info']['name_item'], data['item_info']['id_item'], data['discount'], data['use_count'], data['one_use'], data['all_items'])
            await message.answer(f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ - <b><code>{promocode}</code></b>", reply_markup=menu_frep(message.from_user.id))
            await state.finish()
