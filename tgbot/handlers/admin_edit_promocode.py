# - *- coding: utf- 8 - *-
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery
from tgbot.data.config import BOT_VERSION, PATH_LOGS, PATH_DATABASE
from tgbot.data.loader import dp
from tgbot.keyboards.reply_all import menu_frep
from tgbot.keyboards.reply_admin_promocode import promocode_edit, promocode_exit, promocode_one_use, promocode_edit_exit, delete_promocode
from tgbot.keyboards.inline_admin_promocode import promocode_delete
from tgbot.utils.misc.bot_filters import IsAdmin
from tgbot.modules.create_promocode import *
from tgbot.services.sqlite_logic import  *
from tgbot.services.api_sqlite import get_positionx
from tgbot.utils.const_functions import  ded


async def send_info(message, state, promocode, category):
    async with state.proxy() as memory:
        data = get_info(promocode, category)
        if category == "use_count":
            memory['category'] = "use_count"
            await message.answer(f"<b><i>–ü—Ä–æ–º–æ–∫–æ–¥ –∏–º–µ–µ—Ç <code>{data}</code> –∞–∫—Ç–∏–≤–∞—Ü–∏–π</i>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –∞–∫—Ç–≤–∞—Ü–∏–π</b>", reply_markup=promocode_edit_exit())
        elif category == "discount":
            memory['category'] = "discount"

            position_id = get_info(promocode, "item_position_id")
            info_position = get_positionx(position_id=position_id)
            price = int(info_position['position_price'])
            name_position = info_position['position_name']

            await message.answer(ded(f"""<i>–ü—Ä–æ–º–æ–∫–æ–¥ –∏–º–µ–µ—Ç —Å–∫–∏–¥–∫—É <b>{data}%</b>.</i>
            
                                 –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ '<b>{name_position}</b>' - <b>{price}‚ÇΩ</b>
                                 –¶–µ–Ω–∞ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º - <b>{int(price - (price / 100 * data))}‚ÇΩ</b>

                                 –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ —Å–∫–∏–¥–∫–∏"""), reply_markup=promocode_edit_exit())
            
        elif category == "one_use":
            memory['category'] = "one_use"
            if data == 1:
                await message.answer(f"<b><i>–ü—Ä–æ–º–æ–∫–æ–¥ <code>–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π</code>.</i>\n\n–°–¥–µ–ª–∞—Ç—å –µ–≥–æ –Ω–µ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–º?</b>",  reply_markup=promocode_one_use())
            else:
                await message.answer(f"<b><i>–ü—Ä–æ–º–æ–∫–æ–¥ <code>–ù–µ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π</code>.</i>\n\n–°–¥–µ–ª–∞—Ç—å –µ–≥–æ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–º?</b>",reply_markup=promocode_one_use())
        elif category == "item_position_name" or category == "all_items":
            records = get_all_item()
            message_data = ''
            if records:
                memory['item'] = records
                for character in records:
                    message_data += f"<b><code>{character['position']}</code>. {character['name_item']}</b>\n"
            if category == "item_position_name":
                memory['category'] = "item_position_name"
                info  = get_info(promocode, "all_items")
                if info == 1:
                    await message.answer(f"<b><i>–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–≤—è–∑–∞–Ω –∫–æ <code>–≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º</code>.</i>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n{message_data}",reply_markup=promocode_edit_exit())
                else:
                    await message.answer(f"<b><i>–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–æ–≤–∞—Ä—É:  ¬´<code>{data}</code>¬ª.</i>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n{message_data}", reply_markup=promocode_edit_exit())
            else:
                if data == 1:
                    await message.answer( f"<b>–î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏ —Ç–∞–∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã</b>",reply_markup=promocode_edit_exit())
                else:
                    memory['category'] = "all_items"
                    data = get_info(promocode, "item_position_name")
                    await message.answer(f"<b><i>–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–æ–≤–∞—Ä—É:  ¬´<code>{data}</code>¬ª.</i>\n\n–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã?</b>", reply_markup=promocode_one_use())
        elif category == "promocode":
            memory['category'] = "promocode"
            await message.answer(f"<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –û–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>", reply_markup=promocode_edit_exit())


        await EditPromocode.next()






class EditPromocode(StatesGroup):
    item = State()
    change = State()
    edit = State()

#–ü—Ä–æ–º–æ–∫–æ–¥—ã
@dp.message_handler(IsAdmin(), text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ üìù", state="*")
async def promocode_edit_start(message: Message, state: FSMContext):
    await EditPromocode.item.set()
    records = get_all_promocode()
    message_data = ''
    if records:
        async with state.proxy() as data:
            data['promocode'] = records
        for character in records:
            try:
                item = get_positionx(position_id=character['item_position_id'])
                discount = int(item['position_price'] - (item['position_price'] / 100 * character['discount']))
                price = f"{discount}‚ÇΩ / {character['discount']}%"

            except TypeError:
                price = f"<b>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–≤–∞—Ä!!</b> / {character['discount']}%"
            if character['name_item'] == None:
                character['name_item'] = "–¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã"

            message_data += f"<b><code>{character['position']}</code>. <code>{character['name_promocode']}</code> - {character['name_item']}</b> / {price} \n"
    await message.answer(ded(f"""
    <i><b>–í—ã–±–µ—Ä–∏—Ç–µ <u>–Ω–æ–º–µ—Ä</u> –ø—Ä–æ–º–æ–∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å </b></i>
    ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
    <i>–ü–†–û–ú–û–ö–û–î  ‚û°Ô∏è  –ù–ê–ó–í–ê–ù–ò–ï –¢–û–í–ê–†–ê</i>\n{message_data}\n\n"""), reply_markup=promocode_exit())



@dp.message_handler(IsAdmin(), state = EditPromocode.item)
async def promocode_change(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == "–û—Ç–º–µ–Ω–∞ üîô":
            await state.finish()
            await message.answer(f"<b>–£—Å–ø–µ—à–Ω–æ üëç</b>", reply_markup=menu_frep(message.from_user.id))

        else:
            message_data = False
            for row in data['promocode']:
                if str(row['position']) == message.text:
                    data['promocode_info'] = row
                    message_data = True
            if message_data == True:
                await message.answer(f"<b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞–π–¥–µ–Ω!</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É", reply_markup=promocode_edit())
                await EditPromocode.next()
            else:
                await message.answer(f"<b>–ü—Ä–æ–º–æ–∫–æ–¥ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!</b>", reply_markup=promocode_exit())
                await EditPromocode.item.set()



@dp.message_handler(IsAdmin(), state = EditPromocode.change)
async def promocode_edit_start(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == "–û—Ç–º–µ–Ω–∞ üîô":
            await state.finish()
            await message.answer(f"<b>–£—Å–ø–µ—à–Ω–æ üëç</b>", reply_markup=menu_frep(message.from_user.id))
        elif message.text == "–ß–∏—Å–ª–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π üî¢":
            await send_info(message, state, data['promocode_info']['name_promocode'], "use_count")
        elif message.text == "–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ—Å—Ç—å 0Ô∏è‚É£":
            await send_info(message, state, data['promocode_info']['name_promocode'], "one_use")
        elif message.text == "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ üíØ":
            await send_info(message, state, data['promocode_info']['name_promocode'], "all_items")
        elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ üì¶":
            await send_info(message, state, data['promocode_info']['name_promocode'], "item_position_name")
        elif message.text == "–°–∫–∏–¥–∫—É üíµ":
            await send_info(message, state, data['promocode_info']['name_promocode'], "discount")
        elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ üî†":
            await send_info(message, state, data['promocode_info']['name_promocode'], "promocode")
        elif message.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ ‚ùå":
            promocode = data['promocode_info']['name_promocode']
            await state.finish()
            await message.answer( f"<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥?</b>",reply_markup=promocode_delete(promocode))


@dp.message_handler(IsAdmin(), state = EditPromocode.edit)
async def promocode_edit_start(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞ üîô":
        await state.finish()
        await message.answer(f"<b>–£—Å–ø–µ—à–Ω–æ üëç</b>", reply_markup=menu_frep(message.from_user.id))
    elif message.text == "–ù–∞–∑–∞–¥ ‚¨Ö":
        await EditPromocode.change.set()
        await message.answer(f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É</b>", reply_markup=promocode_edit())
    else:
        data = False
        async with state.proxy() as memory:
            if memory['category'] == 'discount' or memory['category'] == 'use_count':
                try:
                    info_position = get_positionx(position_id = memory['promocode_info']['item_position_id'])
                    price = int(info_position['position_price'])
                    discount = int(memory['promocode_info']['discount'])
                    int(message.text)
                    data = update_info_discount_count_use(memory['promocode_info']['name_promocode'], memory['category'], message.text)
                    if data:
                        await EditPromocode.change.set()
                        await message.answer(f"<b>–£—Å–ø–µ—à–Ω–æ üëç\n\n–¢–æ–≤–∞—Ä {info_position['position_name']} –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å {int(price - (price / 100 * discount))}‚ÇΩ </b>", reply_markup=promocode_edit())
                        return
                except ValueError:
                    await message.answer(f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>", reply_markup=promocode_edit_exit())
                    await EditPromocode.edit.set()
            elif memory['category'] == 'one_use':
                if message.text == "‚úÖ":
                    check = get_info(memory['promocode_info']['name_promocode'], memory['category'])
                    if check == 1:
                        value = 0
                    else:
                        value = 1
                    data = update_info_discount_count_use(memory['promocode_info']['name_promocode'], memory['category'], value)
                elif message.text == '‚ùå':
                    await message.answer(f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É</b>", reply_markup=promocode_edit())
                    await EditPromocode.change.set()
            elif memory['category'] == "item_position_name":
                try:
                    for row in memory['item']:
                        if int(message.text) == row['position']:
                            name_item = row['name_item']
                            id_item = row['id_item']
                    data = update_info_items_promocode(memory['promocode_info']['name_promocode'], name_item, id_item)

                except ValueError:
                    await message.answer(f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞!</b>", reply_markup=promocode_edit_exit())
                    await EditPromocode.edit.set()
            elif memory['category'] == "all_items":
                if message.text == "‚úÖ":
                    data = update_info_all_items_promocode(memory['promocode_info']['name_promocode'])
                elif message.text == '‚ùå':
                    await message.answer(f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É</b>", reply_markup=promocode_edit())
                    await EditPromocode.change.set()
            elif memory['category'] == "promocode":
                data = update_info_discount_count_use(memory['promocode_info']['name_promocode'], memory['category'], message.text)

        if data:
            await EditPromocode.change.set()
            await message.answer(f"<b>–£—Å–ø–µ—à–Ω–æ üëç</b>", reply_markup=promocode_edit())



#–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

@dp.callback_query_handler(IsAdmin(), text_startswith="delete_promocode:", state="*")
async def promocode_delete_start(call: CallbackQuery, state: FSMContext):
    selected = call.data.split(":")[1]
    if selected == 'yes':
        promocode = call.data.split(":")[2]
        delete_promocode_finl(promocode)
        await call.message.answer(ded(f"""
            <b>–£—Å–ø–µ—à–Ω–æ!</b>
            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            <i>–ü—Ä–æ–º–æ–∫–æ–¥ <code>{promocode}</code> —É–¥–∞–ª–µ–Ω! üëç</i>
        """), reply_markup=menu_frep(call.from_user.id))
    elif selected == 'no':
        await call.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup = menu_frep(call.from_user.id))