# - *- coding: utf- 8 - *-
import asyncio
from contextlib import suppress

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.exceptions import MessageCantBeDeleted
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from tgbot.data.config import BOT_DESCRIPTION
from tgbot.data.loader import dp
from tgbot.keyboards.inline_all import profile_open_inl
from tgbot.keyboards.inline_page import *
from tgbot.keyboards.inline_user import *
from tgbot.keyboards.reply_all import menu_frep
from tgbot.services.api_sqlite import *
from tgbot.utils.const_functions import get_date, split_messages, get_unix, ded
from tgbot.utils.misc_functions import open_profile_user, upload_text, get_faq, send_admins
from tgbot.services.sqlite_logic import check_promocode, check_use_promocode, used_promocode,used_pre_order, get_id_promocode, get_promocode, update_promocode
# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(text="üéÅ –ö—É–ø–∏—Ç—å", state="*")
async def user_shop(message: Message, state: FSMContext):
    await state.finish()

    if len(get_all_categoriesx()) >= 1:
        await message.answer("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                             reply_markup=products_item_category_swipe_fp(0))
    else:
        await message.answer("<b>üéÅ –£–≤—ã, —Ç–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", state="*")
async def user_profile(message: Message, state: FSMContext):
    await state.finish()

    await message.answer(open_profile_user(message.from_user.id), reply_markup=profile_open_inl)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏
@dp.message_handler(text="üßÆ –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤", state="*")
async def user_available(message: Message, state: FSMContext):
    await state.finish()

    get_categories = get_all_categoriesx()
    save_items = []

    for category in get_categories:
        get_positions = get_positionsx(category_id=category['category_id'])
        this_items = []

        if len(get_positions) >= 1:
            this_items = [f"<b>‚ûñ‚ûñ‚ûñ {category['category_name']} ‚ûñ‚ûñ‚ûñ</b>"]

            for position in get_positions:
                get_items = get_itemsx(position_id=position['position_id'])

                if len(get_items) >= 1:
                    this_items.append(
                        f"{position['position_name']} | {position['position_price']}‚ÇΩ | –í –Ω–∞–ª–∏—á–∏–∏ {len(get_items)} —à—Ç")

        if len(this_items) >= 2:
            save_items.append(this_items)

    if len(save_items) >= 1:
        send_items = ":^^^^^:".join(["\n".join(item) for item in save_items])

        if len(send_items) > 3500:
            split_items = split_messages(send_items.split("\n"), 40)

            for item in split_items:
                await message.answer("\n".join(item).replace(":^^^^^:", "\n\n"))
        else:
            await message.answer("\n\n".join(["\n".join(item) for item in save_items]))
    else:
        await message.answer("<b>üéÅ –£–≤—ã, —Ç–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")


# –û—Ç–∫—Ä—ã—Ç–∏–µ FAQ
@dp.message_handler(text=["‚Ñπ FAQ", "/faq"], state="*")
async def user_faq(message: Message, state: FSMContext):
    await state.finish()

    send_message = get_settingsx()['misc_faq']
    if send_message == "None":
        send_message = f"‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ò–∑–º–µ–Ω–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n{BOT_DESCRIPTION}"

    await message.answer(get_faq(message.from_user.id, send_message), disable_web_page_preview=True)


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
@dp.message_handler(text=["‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "/support"], state="*")
async def user_support(message: Message, state: FSMContext):
    await state.finish()

    user_support = get_settingsx()['misc_support']
    if str(user_support).isdigit():
        get_user = get_userx(user_id=user_support)

        if len(get_user['user_login']) >= 1:
            await message.answer("<b>‚òé –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>",
                                 reply_markup=user_support_finl(get_user['user_login']))
            return
        else:
            update_settingsx(misc_support="None")

    await message.answer(f"‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞. –ò–∑–º–µ–Ω–∏—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n{BOT_DESCRIPTION}",
                         disable_web_page_preview=True)


################################################################################################
# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
@dp.callback_query_handler(text="user_history", state="*")
async def user_history(call: CallbackQuery, state: FSMContext):
    last_purchases = last_purchasesx(call.from_user.id, 5)

    if len(last_purchases) >= 1:
        await call.answer("üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–∫—É–ø–æ–∫")
        with suppress(MessageCantBeDeleted):
            await call.message.delete()

        for purchases in last_purchases:
            link_items = await upload_text(call, purchases['purchase_item'])

            await call.message.answer(ded(f"""
                                      <b>üßæ –ß–µ–∫: <code>#{purchases['purchase_receipt']}</code></b>
                                      üéÅ –¢–æ–≤–∞—Ä: <code>{purchases['purchase_position_name']} | {purchases['purchase_count']}—à—Ç | {purchases['purchase_price']}‚ÇΩ</code>
                                      üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{purchases['purchase_date']}</code>
                                      üîó –¢–æ–≤–∞—Ä—ã: <a href='{link_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>
                                      """))

        await call.message.answer(open_profile_user(call.from_user.id), reply_markup=profile_open_inl)
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏", True)


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é
@dp.callback_query_handler(text="user_profile", state="*")
async def user_profile_return(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(open_profile_user(call.from_user.id), reply_markup=profile_open_inl)


################################################################################################
######################################### –ü–û–ö–£–ü–ö–ê –¢–û–í–ê–†–ê #######################################
# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_category_swipe:", state="*")
async def user_purchase_category_next_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=products_item_category_swipe_fp(remover))


# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_category_open:", state="*")
async def user_purchase_category_open(call: CallbackQuery, state: FSMContext):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    get_category = get_categoryx(category_id=category_id)
    get_positions = get_positionsx(category_id=category_id)

    if len(get_positions) >= 1:
        with suppress(MessageCantBeDeleted):
            await call.message.delete()

        await call.message.answer(f"<b>üéÅ –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code></b>",
                                  reply_markup=products_item_position_swipe_fp(remover, category_id))
    else:
        if remover == "0":
            await call.message.edit_text("<b>üéÅ –£–≤—ã, —Ç–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")
            await call.answer("‚ùó –ü–æ–∑–∏—Ü–∏–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
        else:
            await call.answer(f"‚ùï –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category['category_name']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_position_open:", state="*")
async def user_purchase_position_open(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    get_position = get_positionx(position_id=position_id)
    get_category = get_categoryx(category_id=category_id)
    get_items = get_itemsx(position_id=position_id)

    if get_position['position_description'] == "0":
        text_description = ""
    else:
        text_description = f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ:\n{get_position['position_description']}"

    send_msg = ded(f"""
               <b>üéÅ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞:</b>
               ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
               üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{get_position['position_name']}</code>
               üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code>
               üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{get_position['position_price']}‚ÇΩ</code>
               üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{len(get_items)}—à—Ç</code>
               {text_description}
               """)

    if len(get_position['position_photo']) >= 5:
        with suppress(MessageCantBeDeleted):
            await call.message.delete()
        await call.message.answer_photo(get_position['position_photo'],
                                        send_msg, reply_markup=products_open_finl(position_id, category_id, remover))
    else:
        await call.message.edit_text(send_msg,
                                     reply_markup=products_open_finl(position_id, category_id, remover))


########################################### –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–†–û–ú–û–ö–û–î–ê ##########################################

class Promocode(StatesGroup):
    promocode = State()


@dp.callback_query_handler(text_startswith="promocode_position_open:", state="*")
async def user_promocode_start(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])


    async with state.proxy() as data:
        data['position_id'] = position_id
        data['category_id'] = category_id
        data['remover'] = remover
    with suppress(MessageCantBeDeleted):
        await call.message.delete()
    await call.message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥</b>", reply_markup=promocode_back(position_id, category_id, remover))
    await Promocode.promocode.set()

@dp.message_handler(state = Promocode.promocode)
async def procomode_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        get_position = get_positionx(position_id=data['position_id'])
        get_category = get_categoryx(category_id=data['category_id'])
        get_items = get_itemsx(position_id=data['position_id'])

        if get_position['position_description'] == "0":
            text_description = ""
        else:
            text_description = f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ:\n{get_position['position_description']}"
        promocode = False
        check = check_promocode(message.text)
        if len(check) == 0: #–ü—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç –≤ –°–£–ë–î
            await message.answer("<b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>", reply_markup = promocode_back(data['position_id'], data['category_id'], data['remover'] ))
        else:
            for i in check:
                position_id = i[3]
                position_name = i[4]
                all_items = i[5]
                discount = i[6]
                use_count = i[7]
                one_use = i[8]
            if position_name == None or position_name == get_position['position_name']:
                check_used = check_use_promocode(message.text)
                if check_used >= 1: #–ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª—å –µ—â–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    if one_use == 1: #–ü—Ä–æ–º–æ–∫–æ–¥ –µ–¥–∏–Ω–æ—Ä–∞–∑
                            check = used_promocode(message.text, message.from_user.id)   #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                            if check == 0: #–ü—Ä–æ–º–æ–∫–æ–¥ –µ—â–µ –Ω–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                                promocode = True
                            else:
                                send_msg = ded(f"""
                                           <b>üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:</b>
                                           ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                           üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{get_position['position_name']}</code>
                                           üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code>
                                           üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{get_position['position_price']}‚ÇΩ</code>
                                           üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{len(get_items)}—à—Ç</code>
                                           {text_description}
                                           """)
                                await message.answer(send_msg,  reply_markup=products_open_finl(data['position_id'], data['category_id'], data['remover'] ))

                    else:
                        promocode = True

                else:
                    send_msg = ded(f"""
                                   <b>üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç:</b>
                                   ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                   üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{get_position['position_name']}</code>
                                   üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code>
                                   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{get_position['position_price']}‚ÇΩ</code>
                                   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{len(get_items)}—à—Ç</code>
                                   {text_description}
                                   """)
                    await message.answer(send_msg, reply_markup=products_open_finl(data['position_id'], data['category_id'],  data['remover']))
            else:
                send_msg = ded(f"""
                           <b>üéÅ–î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç!:</b>
                           ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                           üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{get_position['position_name']}</code>
                           üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code>
                           üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{get_position['position_price']}‚ÇΩ</code>
                           üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{len(get_items)}—à—Ç</code>
                           {text_description}
                           """)
                await message.answer(send_msg, reply_markup=products_open_finl(data['position_id'], data['category_id'], data['remover']))
            if promocode:
                #–í—ã—Å—á–∏—Ç—ã–≤–Ω–∏–µ —Å–∫–∏–¥–∫–∏

                send_msg = ded(f"""
                               <b>üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:</b>
                               ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                               üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{get_position['position_name']}</code>
                               üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code>
                               üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{int(get_position['position_price'] - (get_position['position_price'] / 100 * discount)) }‚ÇΩ</code>
                               üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{len(get_items)}—à—Ç</code>
                               {text_description}
                               """)
                promocode_id = get_id_promocode(message.text)
                await message.answer(send_msg,  reply_markup=products_open_finl_after_promocod(data['position_id'], data['category_id'], data['remover'], discount, promocode_id ))


# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_position_swipe:", state="*")
async def user_purchase_position_next_page(call: CallbackQuery, state: FSMContext):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    get_category = get_categoryx(category_id=category_id)

    await call.message.edit_text(f"<b>üéÅ –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code></b>",
                                 reply_markup=products_item_position_swipe_fp(remover, category_id))




########################################### –ü–û–ö–£–ü–ö–ê ##########################################


# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_item_open:", state="*")
async def user_purchase_select(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    get_position = get_positionx(position_id=position_id)
    get_items = get_itemsx(position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)

    try:
        discount = int(call.data.split(":")[3])
        promocode = int(call.data.split(":")[4])
        promocode = get_promocode(promocode)
        price = int(get_position['position_price'] - (get_position['position_price'] / 100 * discount))
    except IndexError:
        discount = None
        promocode = None
        price = int(get_position['position_price'])


    if get_position['position_pre_order'] == 0:
        pre_order_description = ""
    elif get_position['position_pre_order'] == 1:
        pre_order_description = "‚ùï <b>–í–Ω–∏–º–∞–Ω–∏–µ! —É —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ <code>–Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ</code> —Ç–æ–≤–∞—Ä—ã –º–æ–∂–Ω–æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞—Ç—å</b>"


    if price != 0:
        get_count = int(get_user['user_balance'] / price)
        if get_count > len(get_items): get_count = len(get_items)
    else:
        get_count = len(get_items)
    if int(get_user['user_balance']) >= price:
        if get_count >= 1:
            await state.update_data(here_cache_position_id=position_id)
            await state.set_state("here_item_count")
            async with state.proxy() as data:
                data['price'] = price
                data['discount'] = discount
                data['promocode'] = promocode
                data['remover'] = remover
            with suppress(MessageCantBeDeleted):
                await call.message.delete()
            await call.message.answer(ded(f"""
                                      <b>üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>
                                      ‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{get_count}</code>
                                      ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                      {pre_order_description}
                                      ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                      üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code> - <code>{price}‚ÇΩ</code>
                                      üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user['user_balance']}‚ÇΩ</code>
                                      """))
        else:
            if get_position['position_pre_order'] == 0:
                await call.message.answer("<b>‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. üò•</b>",  reply_markup=replenish_user())
            else:
                await call.message.edit_text(ded("""üéÅ –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
                                               ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                               ‚ñ∂–ñ–µ–ª–∞–µ—Ç–µ –ª—å –≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑?"""), reply_markup=products_pre_order_select(position_id, remover, discount, promocode))

    else:
        await call.message.answer("<b>‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. üò•</b>", reply_markup=replenish_user())


# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(text_startswith="buy_item_open_preorder:", state="*")
async def user_purchase_pre_order(call: CallbackQuery, state: FSMContext):
    select = call.data.split(":")[1]
    position_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    get_position = get_positionx(position_id=position_id)
    get_items = get_itemsx(position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)

    try:
        discount = int(call.data.split(":")[4])
        promocode = call.data.split(":")[5]
        price = int(get_position['position_price'] - (get_position['position_price'] / 100 * discount))
    except:
        discount = None
        promocode = None
        price = int(get_position['position_price'])


    if select == "yes":

        if int(get_user['user_balance']) >= price:
            await state.update_data(here_cache_position_id=position_id)
            await state.finish()


            await state.update_data(here_cache_position_id=position_id)
            await state.set_state("here_item_count")
            async with state.proxy() as data:
                data['price'] = price
                data['discount'] = discount
                data['promocode'] = promocode
                data['remover'] = remover

            await call.message.edit_text(ded(f"""
                                      <b>üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞</b>
                                      ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                      üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code> - <code>{price}‚ÇΩ</code>
                                      üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user['user_balance']}‚ÇΩ</code>
                                      """))

        else:
            await call.message.answer("<b>‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. üò•</b>", reply_markup=replenish_user())

    else:
        await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", reply_markup=products_item_category_swipe_fp(remover))





# –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.message_handler(state="here_item_count")
async def user_purchase_select_count(message: Message, state: FSMContext):
    async with state.proxy() as data:
        price = data['price']
        promocode  = data['promocode']
        remover = data['remover']
    position_id = (await state.get_data())['here_cache_position_id']
    get_position = get_positionx(position_id=position_id)
    get_user = get_userx(user_id=message.from_user.id)
    get_items = get_itemsx(position_id=position_id)


    if price != 0:
        get_count = int(get_user['user_balance'] / price)
        if get_count > len(get_items): get_count = len(get_items)
    else:
        get_count = len(get_items)

    if get_position['position_pre_order'] == 0:
        pre_order_description = ""
    elif get_position['position_pre_order'] == 1:
        pre_order_description = "‚ùï <b>–í–Ω–∏–º–∞–Ω–∏–µ! —É —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ <code>–Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ</code> —Ç–æ–≤–∞—Ä—ã –º–æ–∂–Ω–æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞—Ç—å</b>"

    send_message = ded(f"""
                   ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                   üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                   ‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{get_count}</code>
                   {pre_order_description}
                   ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                   üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code> - <code>{price}‚ÇΩ</code>
                   üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user['user_balance']}‚ÇΩ</code>
                   """)

    if message.text.isdigit():
        get_count = int(message.text)
        amount_pay = price * get_count

        if len(get_items) >= 1:
            if 1 <= get_count <= len(get_items):
                if int(get_user['user_balance']) >= amount_pay:
                    await state.finish()

                    await message.answer(ded(f"""
                                         <b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã)?</b>
                                         ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                         üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code>
                                         üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{get_count}—à—Ç</code>
                                         üí∞ –°—É–º–º–∞ –∫ –ø–æ–∫—É–ø–∫–µ: <code>{amount_pay}‚ÇΩ</code>
                                         """),
                                         reply_markup=products_confirm_finl(position_id, get_count, amount_pay, promocode))
                else:
                    await message.answer(f"<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ.</b>\n" + send_message, reply_markup=replenish_user())
            else:

                if get_position['position_pre_order'] == 0:
                    await message.answer(f"<b>‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤.</b>\n" + send_message)
                else:
                    await message.answer(ded(f"""üéÅ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–æ <code>{get_count}</code> —à—Ç. —Ç–æ–≤–∞—Ä–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–≤–∞—Ä —Å–µ–π—á–∞—Å, –∞ –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ <code>{(get_count - len(get_items))}</code> —à—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏
                                                   ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                                   ‚ñ∂–ñ–µ–ª–∞–µ—Ç–µ –ª—å –≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑?"""),
                                                 reply_markup=products_pre_order_confirm(position_id, get_count, price, promocode, remover))
        else:
            if get_position['position_pre_order'] == 0:
                await state.finish()
                await message.answer("<b>üéÅ –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è</b>")
            else:
                await message.answer(ded(f"""
                                                         <b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã)?</b>
                                                         ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                                         üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code>
                                                         üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{get_count}—à—Ç</code>
                                                         üí∞ –°—É–º–º–∞ –∫ –ø–æ–∫—É–ø–∫–µ: <code>{amount_pay}‚ÇΩ</code>
                                                         """),
                                     reply_markup=products_confirm_finl(position_id, get_count, amount_pay, promocode))

    else:
        await message.answer(f"<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n" + send_message)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="pre_order_setup:", state="*")
async def user_purchase_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    position_id = int(call.data.split(":")[2])
    get_count = int(call.data.split(":")[3])
    price = int(call.data.split(":")[4])
    promocode = (call.data.split(":")[5])
    remover = int(call.data.split(":")[6])

    get_position = get_positionx(position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)

    amount_pay = price * get_count

    if get_action == "yes":
        if int(get_user['user_balance']) >= amount_pay:
            await call.message.edit_text(ded(f"""
                                 <b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã)?</b>
                                 ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                 üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code>
                                 üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{get_count}—à—Ç</code>
                                 üí∞ –°—É–º–º–∞ –∫ –ø–æ–∫—É–ø–∫–µ: <code>{amount_pay}‚ÇΩ</code>
                                 """),
                                 reply_markup=products_confirm_finl(position_id, get_count, amount_pay, promocode))
        else:
            await call.message.answer("<b>‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. üò•</b>", reply_markup=replenish_user())

    else:
        await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", reply_markup=products_item_category_swipe_fp(remover))




# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="buy_item_confirm:", state="*")
async def user_purchase_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    position_id = int(call.data.split(":")[2])
    get_count = int(call.data.split(":")[3])
    price = int(call.data.split(":")[4])
    promocode = (call.data.split(":")[5])

    if get_action == "yes":
        await call.message.edit_text("<b>üîÑ –ñ–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è</b>")

        get_position = get_positionx(position_id=position_id)
        get_items = get_itemsx(position_id=position_id)
        get_user = get_userx(user_id=call.from_user.id)

        amount_pay = price

        if 1 <= int(get_count) <= len(get_items):
            if int(get_user['user_balance']) >= amount_pay:
                save_items, send_count, split_len = buy_itemx(get_items, get_count)

                if get_count != send_count:
                    amount_pay = price
                    get_count = send_count

                receipt = get_unix()
                buy_time = get_date()

                with suppress(MessageCantBeDeleted):
                    await call.message.delete()
                if split_len == 0:
                    await call.message.answer("\n\n".join(save_items), parse_mode="None")
                else:
                    for item in split_messages(save_items, split_len):
                        await call.message.answer("\n\n".join(item), parse_mode="None")
                        await asyncio.sleep(0.3)

                update_userx(get_user['user_id'], user_balance=get_user['user_balance'] - amount_pay)
                add_purchasex(get_user['user_id'], get_user['user_login'], get_user['user_name'], receipt, get_count,
                              amount_pay, get_position['position_price'], get_position['position_id'],
                              get_position['position_name'], "\n".join(save_items), buy_time, receipt,
                              get_user['user_balance'], int(get_user['user_balance'] - amount_pay))

                get_items = len(get_itemsx(position_id=position_id)) #–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
                print(get_items)
                if get_items <= 0:
                    await send_admins(
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{call.from_user.username} <i>–ö—É–ø–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä</i></b>\n"
                        f"üí∞ –ü–æ–∑–∏—Ü–∏—è: <code>{get_position['position_name']}</code>\n" )
                try:

                    used_promocode(promocode, call.from_user.id)
                except TypeError:
                    pass
                await call.message.answer(ded(f"""
                                          <b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä(—ã)</b>
                                          ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                          üßæ –ß–µ–∫: <code>#{receipt}</code>
                                          üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']} | {get_count}—à—Ç | {amount_pay}‚ÇΩ</code>
                                          üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{buy_time}</code>
                                          """),
                                          reply_markup=menu_frep(call.from_user.id))
            else:
                await call.message.answer("<b>‚ùó –ù–∞ –≤–∞—à–µ–º —Å—á—ë—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>")


        else:
            if get_position['position_pre_order'] == 1:
                if int(get_user['user_balance']) >= amount_pay:
                    save_items, send_count, split_len = buy_itemx(get_items, get_count)

                    if get_count != send_count:
                        amount_pay = price

                    receipt = get_unix()
                    buy_time = get_date()

                    with suppress(MessageCantBeDeleted):
                        await call.message.delete()
                    if split_len == 0:
                        await call.message.answer("\n\n".join(save_items), parse_mode="None")
                    else:
                        for item in split_messages(save_items, split_len):
                            await call.message.answer("\n\n".join(item), parse_mode="None")
                            await asyncio.sleep(0.3)

                    update_userx(get_user['user_id'], user_balance=get_user['user_balance'] - amount_pay)
                    add_purchasex(get_user['user_id'], get_user['user_login'], get_user['user_name'], receipt,
                                  get_count,
                                  amount_pay, get_position['position_price'], get_position['position_id'],
                                  get_position['position_name'], "\n".join(save_items), buy_time, receipt,
                                  get_user['user_balance'], int(get_user['user_balance'] - amount_pay))

                    try:
                        update_promocode(promocode, call.from_user.id)
                        used_promocode(promocode, call.from_user.id)
                    except TypeError:
                        pass
                    used_pre_order(call.from_user.id, call.from_user.username, get_position['position_id'], get_position['position_name'], (get_count - len(get_items)) )

                    #–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∞–º
                    await send_admins(
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{call.from_user.username}</b> | –û—Ñ–æ—Ä–º–∏–ª –ø—Ä–µ–¥–∑–∞–∫–∞–∑\n"
                        f"üí∞ –ü–æ–∑–∏—Ü–∏—è: <code>{get_position['position_name']}</code>\n"
                        f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{get_count}</code>—à—Ç.\n"
                        f"üßæ –¢–æ–≤–∞—Ä—ã —Ç—Ä–µ–±—É–µ–º—ã–µ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏: <code>{get_count - len(get_items)}</code>—à—Ç."
                    )

                    await call.message.answer(ded(f"""
                                                         <b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä(—ã)</b>
                                                         ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                                         üßæ –ß–µ–∫: <code>#{receipt}</code>
                                                         üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']} | {get_count}—à—Ç | {amount_pay}‚ÇΩ</code>
                                                         üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{buy_time}</code>
                                                         """),
                                              reply_markup=menu_frep(call.from_user.id))
                else:
                    await call.message.answer("<b>‚ùó –ù–∞ –≤–∞—à–µ–º —Å—á—ë—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>")

            else:

                await call.message.answer("<b>üéÅ –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è.</b>",
                                          reply_markup=menu_frep(call.from_user.id))
    else:
        if len(get_all_categoriesx()) >= 1:
            await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                         reply_markup=products_item_category_swipe_fp(0))
        else:
            await call.message.edit_text("<b>‚úÖ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–æ–≤.</b>")

